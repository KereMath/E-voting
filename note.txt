Appendix
A.1 TIAC
A.1.1 Ba¸slangıç
TIAC/Coconut, p asal mertebeli tip 3 (G1, G2, GT ) iki dogrusal (bilinear) grup üzerinde ˘
çalı¸smaktadır. Ayrıca G1’deki bir elemanı G1’in diger elemanına e¸sleyen kriptografik olarak ˘
güvenli özet fonksiyonu (H : G1 −→ G1) kullanmaktadır. Algoritma 1, güvenlik parametresi
λ’ya göre sistemin açık parametrelerini tanımlamaktadır.
Algoritma 1 TIAC Kurulum
Girdi: Seçilecek λ güvenlik parametresi (Sistemimizde 256-bit)
Çıktı: params = (G1, G2, GT , p, g1, g2, h1) (genel parametreler)
1: λ-bit asal sayı olan p mertebeli bilinear group (G1, G2, GT ) seç
2: g1 ve h1 G1 grubunun üreteci, g2 ise G2 grubunun üreteci olsun
3: return params = (G1, G2, GT , p, g1, g2, h1)
A.1.2 Anahtar Üretimi
Sistemdeki her bir EA otoritesinin, kendi imzalama anahtarı sgkm ve dogrulama anahtarı ˘
vkm olması gerekmektedir. Üçüncü güvenilir otorite (TTP) tarafından Algoritma 2 çalı¸stırılarak
EA otoritelerinin anahtarları olu¸sturulabilmektedir. Ana dogrulama anahtarı ˘ mvk ise vkm
çıktılarının birle¸stirilmesi sonucu olu¸sturulmaktadır. Alternatif olarak bu algoritma üçüncü
güvenilir otorite yerine, Gennaro [6] ya da Kate [7]’de önerilen algoritmalar ile dagıtılmı¸s bir ˘
¸sekilde olu¸sturulabilmektedir.
24
FAME CRYPT
Algoritma 2 Coconut TTP ile Anahtar Üretimi
Girdi: params = (G1, G2, GT , p, g1, g2, h1), t e¸sik degeri ˘
Çıktı: sgkm, vkm (m ∈ {1, · · · , ne})
1: Katsayıları rastgele olarak Zp’de olan (t − 1) dereceli iki adet (v, w) polinomu seç
2: msgk = (x, y) ← (v(0), w(0))
3: for m = 1 to ne do
4: sgkm = (xm, ym) ← (v(m), w(m))
5: vkm = (α2,m, β2,m, β1,m) ← (g
xm
2
, g
ym
2
, g
ym
1
)
6: end for
7: mvk = (params, α2, β2, β1) ← (params, gx
2
, g
y
2
, g
y
1
)
8: return (mvk,(sgkm, vkm))
Coconut TTP’siz Anahtar Üretimi (Pedersen’s DKG) [12],[6], [15]
• Her bir EAi
, Z
∗
p
’da rastgele olarak iki tam sayı xi0, yi0 seçer ve ¸sunları yapar:
– t adet rastgele tam sayı seç {xij , yij}
t
j=1
– Fi
[X] ← xi0 + xi1.X + · · · + xit.Xt
, Gi
[X] ← yi0 + yi1.X + · · · + yit.Xt olu¸stur
– ∀j ∈ [0, t], katsayılar üzerinde baglılık i¸slemi (commit) uygula ˘ Vxij ← g
xij
2
, Vyij ←
g
yij
2
, V
′
yij
← g
yij
1
– Fi(l) ve Gi(l) ’yi l. EA otoritesine gönder (EAl
, l ∈ [1, ne]/{i})
• EAi
, EAl’den aldıgı˘ Fl(i) ve Gl(i) parçalarının tutarlılıgını kontrolü için ¸sunları hesaplar: ˘
g
Fl(i)
2 =
Qt
j=0 V
i
j
xlj , g
Gl(i)
2 =
Qt
j=0 V
i
j
ylj , g
Gl(i)
1 =
Qt
j=0 V
′i
j
ylj . Eger e¸sitlikler sa ˘ glanıyorsa, ˘
EAi bu parçaları kabul eder, saglanmıyorsa da reddeder ve ardından hatalı seçim yöneticisi ˘
olan EAl hakkında ¸sikayet eder
• En az t ¸sikayet alan herhangi bir hatalı taraf diskalifiye edilmi¸s olarak adlandırılır ve bu
a¸samanın sonunda diskalifiye edilen oyuncu grubundan en az t taraf, Q ⊂ {1, · · · , n} bir
sonraki adımı gerçekle¸stirir.
• Ana dogrulama anahtarı (mvk) ¸söyle hsaplanır ˘
mvk := (vk1, vk2, vk3) := (Q
i∈Q
Vxi0,
Q
i∈Q
Vyi0,
Q
i∈Q
V
′
yi0
) = (g
P
i∈Q xi0
2
, g
P
i∈Q yi0
2
, g
P
i∈Q yi0
1
)
= (g
x
2
, g
y
2
, g
y
1
). Bu anahtara kar¸sılık gelen ana imzalama anahtarı (msgk) ¸söyledir:
msgk := (sk1, sk2) = (P
i∈Q
xi0,
P
i∈Q
yi0)
• Her bir yetkili/diskalifiye edilmemi¸s EAi kendi imza anahtarının parçasını (signing key
share) ¸söyle tanımlar: sgki
:= (ski1, ski2) := (P
l∈Q Fl(i),
P
l∈Q Gl(i))
25
FAME CRYPT
• Buna kar¸sılık gelen dogrulama anahtarı ˘ vki ¸söyle elde edilir: vki
:= (vki1, vki2, vki3) :=
(
Q
l∈Q
Qt
j=0(Vxlj )
i
j
,
Q
l∈Q
Qt
j=0(Vylj )
i
j
,
Q
l∈Q
Qt
j=0(V
′
ylj )
i
j
) := (g
F(i)
2
, g
G(i)
2
, g
G(i)
1
) where
F[X] = P
l∈Q Fl
[X] and G[X] = P
l∈Q Gl
[X]
• Anahtar olu¸sturma a¸saması, (sgk1, · · · , sgkn) imzalama anahtarlarından ve (vk1, · · · , vkn)
dogrulama anahtarlarından olu¸san n boyutunda iki vektörün yanı sıra ˘ mvk genel dogru- ˘
lama anahtarı (mvk) ile tamamlanır.
NOT: Anahtar üretiminde yukarıdaki TTP’li ve TTP’siz olarak önerilen yöntemler olsa da,
sistemde yazılım kolaylıgı açısından ¸söyle bir yol izlenmi¸stir. Algoritma 3 kullanılarak her bir EA ˘
imzalama ve dogrulama anahtarını TTP’siz olarak üretebilir. Bu durumda olu¸sturulan do ˘ grulama ˘
anahtarında vkm = (g
xm
2
, g
ym
2
, g
ym
1
) = (vk1, vk2, vk3), vk1 için Algoritma ?? kullanılarak Pok of
DL ispatı olu¸sturulmalı ve buna ek olarak vk2 ve vk3’de kullanılan ym degerlerinin e¸sit oldu ˘ gu˘
bilgisinin ispatı için Algoritma ?? kullanılarak ispat olu¸sturulmalı. Bu ispatların kontolleri
sonucu, ana dogrulama anhatarı olu¸sturulur ( ˘ mvk =
Qne
i=1 vkm)
Algoritma 3 Coconut TTP’siz Kolay Anahtar Üretimi
Girdi: params = (G1, G2, GT , p, g1, g2, h1)
Çıktı: sgkm, vkm (m ∈ {1, · · · , ne})
1: Z
∗
p
’da gizli anahtar olacak olan sgkm = (xm, ym) tamsayısı seç
2: vkm = (α2,m, β2,m, β1,m) ← (g
xm
2
, g
ym
2
, g
ym
1
)
3: return (sgkm, vkm)
A.1.3 ˙Imzalama
Dijital kimlik (credential), kullanıcının özelliklerini tutan niteliklerin (attribute) otoriteler
tarafından imzalanmı¸s halidir. Sistemde seçmenin dijital kimliginin ( ˘ DIDi) imzalanması için
TIAC kimlik yetkilendirmesi sırasıyla 3 a¸samadan olu¸smaktadır:
• Kör imzalama mesajının olu¸sturulma a¸saması (PrepareBlindSign)
• Kör imzalama a¸saması (BlindSign)
• Körle¸stirme faktörünün çıkarılması a¸saması (UnBlind)
a)Kör imzalama mesajının olu¸sturulması
Algoritma 7, her bir seçmen tarafından seçim öncesindeki a¸samada çalı¸stırılmaktadır. Kör imzalama mesajının olu¸sturulması a¸samasında her seçmen, dijital kimlik bilgisinin commitment degerini ˘
26
FAME CRYPT
ve bu degere ait sıfır bilgi ispatını ˘ (knowledge of the opening of commitment) olu¸sturmakta ve
EA otoritelerine imzalama için göndermektedir.
Dikkat:Bir önceki proje sisteminde TIAC, burada yazılan sözde kodlarla gerçekle¸stirilmi¸stir.
Fakat Algoritma 7’deki yazılan 3 ayrı ispat sistemi, Coconut Github kodunda prepare_blind_sign
algoritmasındaki 1
tek make_pi_s_up fonksiyonu ile kanıtlanmı¸stır. Bunun için Algoritma 7 ve
içerisindeki ispatlar/dogrulamalar yerine Algoritma 4 uygulanması gerekmektedir: ˘
Algoritma 4 TIAC Kör ˙Imzalama Mesajının Olu¸sturulması (GÜNCEL)
Girdi: params, DIDi
Çıktı: com, πs
1: Zp’de rastgele oi degeri seç ˘
2: comi ← g
oi
1
.hDIDi
1
3: h ← Hash(comi) (h ∈ G1) (H : F1 → G1)
4: Zp’de rastgele o degeri seç ˘
5: com ← g
o
1
.hDIDi
6: πs ← KoR(com, comi) (Alg 5 ile)
7: return (com, comi
, h, πs)
Algoritma 5 Temsil Bilgisinin ˙Ispatı (Knowledge of Representation, KoR()-GÜNCEL)
Girdi: G1, p, g1, h, h1, com, comi
Çıktı: πs
1: Zp’de r1, r2, r3 üç rastgele üs degeri seç ˘
2: com′
i ← g
r1
1
· h1
r2
3: com′ ← g
r3
1
· h
r2
4: c ← Hash(g1, h, h1, com, com′
, comi
, com′
i
)
5: s1 ← r1 − c · oi
6: s2 ← r2 − c · DIDi
7: s3 ← r3 − c · o
8: πs ← (c, s1, s2, s3)
9: return πs
1https://github.com/asonnino/coconut/blob/master/coconut/scheme_up.py
27
FAME CRYPT
Algoritma 6 Temsil Bilgisinin ˙Ispatının Kontrolü (Knowledge of Representation Check,
CheckKoR())-GÜNCEL
Girdi: (G1, p, g1, h, h1), com = g
o
1
.hDIDi
, πs = (c, s1, s2, s3)
Çıktı: πs = 1
1: com′′
i ← g
s1
1
.h1
s2
.comi
c
2: com′′ ← g
s3
1
.hs2
.comc
3: c
′ ← Hash(g1, h, h1, com, com′′, comi
, com′′
i
)
4: if c
′ ̸= c then
5: return ”Hata”
6: else
7: return πs = 1
8: end if
Algoritma 7 TIAC Kör ˙Imzalama Mesajının Olu¸sturulması (ESK˙I)
Girdi: params, DIDi
Çıktı: com, KnowRep
1: Zp’de rastgele oi degeri seç ˘
2: comi ← g
oi
1
.hDIDi
1
3: h ← Hash(comi) (h ∈ G1) (H : F1 → G1)
4: Zp’de rastgele o degeri seç ˘
5: com ← g
o
1
.hDIDi
6: KnowRepi ← KoR(comi) (Alg 9 ile)
7: KnowRep ← KoR(com) (Alg 8 ile)
8: P roofEq ← P oE(com, comi) (Alg ?? ile)
9: return (com, comi
, KnowRep, KnowRepi
, P roofEq, h)
28
FAME CRYPT
Algoritma 8 Temsil Bilgisinin ˙Ispatı (Knowledge of Representation, KoR() [17]- ESK˙I)
Girdi: G1, p, g1, h, com
Çıktı: πKoR(com)
1: Zp’de r1, r2 iki rastgele üs degeri seç ˘
2: com′ ← g
r1
1
.hr2
3: c ← Hash(g1, h, com, com′
)
4: s1 ← r1 − c.o
5: s2 ← r2 − c.DIDi
6: πKoR(com) ← (c, s1, s2)
7: return πKoR(com)
Algoritma 9 Temsil Bilgisinin ˙Ispatıi
, KoRi() [17])-ESK˙I
Girdi: G1, p, g1, h1, comi
Çıktı: πKoR(comi)
1: Zp ’de r1, r2 iki rastgele üs seç
2: com′
i ← g
r1
1
.hr2
1
3: ci ← Hash(g1, h1, comi
, com′
i
)
4: s1 ← r1 − ci
.oi
5: s2 ← r2 − ci
.DIDi
6: πKoR(comi) ← (ci
, s1, s2)
7: return πKoR(comi)
Algoritma 10 Temsil Bilgisinin ˙Ispatının Kontrolü (Knowledge of Representation Check,
CheckKoR())-ESK˙I
Girdi: (G1, p, g1, h), com = g
o
1
.hDIDi
, πKoR(com) = (c, s1, s2)
Çıktı: πKoR(com) = 1
1: com′′ ← g
s1
1
.hs2
.comc
2: c
′ ← Hash(g1, h, com, com′′)
3: if c
′ ̸= c then
4: return ”Hata”
5: else
6: return πKoR(com) = 1
7: end if
29
FAME CRYPT
Algoritma 11 Temsil Bilgisinin ˙Ispatının Kontrolüi (CheckKoRi())-ESK˙I
Girdi: (G1, p, g1, h1), comi = g
oi
1
.hDIDi
1
, πKoR(comi) = (ci
, s1, s2)
Çıktı: πKoR(comi) = 1
1: com′′
i ← g
s1
1
.hs2
1
.com
ci
i
2: c
′
i ← Hash(g1, h1, comi
, com′′
i
)
3: if c
′
i ̸= c then
4: return ”Hata”
5: else
6: return πKoR(comi) = 1
7: end if
b)Kör imzalama
Algoritma 12, t e¸sik degerine ba ˘ glı olarak yeterli sayıdaki EA otoritesi tarafından seçim öncesin- ˘
deki a¸samada çalı¸stırılmaktadır. Kör imzalama a¸samasında, imzalayıcı otoriteler seçmenin
commitment degeri üzerindeki KoR() ispatını do ˘ gruladıktan (Alg 6, 11) sonra imzalama i¸slemini ˘
gerçekle¸stirmektedir.
Algoritma 12 TIAC Kör ˙Imzalama
Girdi: Kπs, h, comi
,(xm, ym)
Çıktı: σ
′
m = (h, cm)
1: if πs ̸= 1 (Alg 6)or Hash(comi) ̸= h then
2: return ”Hata”
3: else
4: cm ← h
xm.comym
5: end if
6: return σ
′
m = (h, cm)
c)Körle¸stirme faktörünün çıkarılması
Algoritma 13, her bir seçmen tarafından seçim öncesindeki a¸samada çalı¸stırılmaktadır. Yeterli
sayıdaki EA tarafından gönderilen kör imzalı deger üzerindeki körle¸stirme faktörü seçmen ˘
tarafından çıkarılarak asıl imza elde edilmektedir. Buradaki e bilinear map’dir ve u ∈ G1,
v ∈ G2, a, b ∈ Z için e(u
a
, vb
) = e(u, v)
ab özelligini göstermektedir. ˘
30
FAME CRYPT
Algoritma 13 TIAC Körle¸stirme Faktörünün Çıkarılması
Girdi: comi
, h, g2, o, vkm = (α2,m, β2,m, β1,m), σ′
m = (h, cm)
Çıktı: σm = (h, sm)
1: if Hash(comi) ̸= h then
2: return ”Hata”
3: else
4: σm = (h, sm) ← (h, cm.β−o
1,m)
5: if e(h, α2,m.βDIDi
2,m ) = e(sm, g2) then
6: return σm = (h, sm)
7: else
8: return ”Hata”
9: end if
10: end if
A.1.4 ˙Imza Birle¸stirme
Körle¸stirme faktörünün çıkarılması a¸samasından sonra seçmen, bu imzaları birle¸stirerek
kendi cüzdan adresine ait dijital kimlik bilgisi üzerinde tek bir imza elde etmektedir. ˙Imza
birle¸stirme algoritması, Algoritma 14’de verilmi¸stir. Algoritma 13’deki 5. adımda partial imza
kontrolü zaten yapıldıgı için a¸sa ˘ gıdaki algoritmadaki 6. adım kontrolü yapılmayabilir. ˘
Algoritma 14 TIAC ˙Imza Birle¸stirme
Girdi: σm = (h, sm), mvk = (α2, β2, β1) = (g
x
2
, g
y
2
, g
y
1
)
Çıktı: σ = (h, s)
1: s = 1
2: for m = 1 to t do
3: s ← sm.s
4: end for
5: σ ← (h, s)
6: if e(h, α2.βDIDi
2
) = e(s, g2) then
7: return σ
8: else
9: return ”Hata”
10: end if
31
FAME CRYPT
A.1.5 ˙Imza Kanıtı
Algoritma 15 seçmen tarafından çalı¸stırılmaktadır ve sisteme seçmenin yetkili oldugunun ˘
kanıtı olarak gönderilmektedir. Bu algoritma, seçmenin dijital kimligi üzerindeki imzayı rast- ˘
gelele¸stirme adımını içermektedir. πv(k) seçmenin DIDi degerini bildi ˘ gini ve k de ˘ gerinin ˘
DIDi ve r
′′ ile dogru olarak olu¸sturuldu ˘ gunu kanıtlamaktadır. ˘
Algoritma 15 TIAC ˙Imza Kanıtı
Girdi: σ = (h, s), mvk = (α2, β2, β1) = (g
x
2
, g
y
2
, g
y
1
)
Çıktı: σ
Rnd = (σ
′′, k)
1: Zp’de rastgele r degeri seç ˘
2: h
′′ ← h
r
′
3: s
′′ ← s
r
′
.(h
′′)
r
4: σ
′′ = (h
′′, s′′)
5: k ← α2.βDIDi
2
.gr
2
6: πv ← KoR(k) (Alg 16 ile)
7: σ
Rnd = (σ
′′, k)
8: return σ
Rnd
Algoritma 16 K de˘geri üzerinde Temsil Bilgisinin ˙Ispatı (Knowledge of Representation, KoR())
Girdi: g1, g2, h, k = α2.βDIDi
2
.gr
2
, com = g
o
1
.hDIDi
Çıktı: πv
1: Zp’de r1, r2, r3 üç rastgele üs degeri seç ˘
2: k
′ ← g
r1
2
· α2 · β2
r2
3: com′ ← g
r3
1
· h
r2
4: c ← Hash(g1, g2, h, com, com′
, k, k′
)
5: s1 ← r1 − c · r
6: s2 ← r2 − c · DIDi
7: s3 ← r3 − c · o
8: πv ← (c, s1, s2, s3)
9: return πs
32
FAME CRYPT
Algoritma 17 K de˘geri üzerinde Temsil Bilgisinin ˙Ispatının Kontrolü (Knowledge of Representation Check, CheckKoR())
Girdi: (g1, g2, h), com = g
o
1
.hDIDi
, k = α2.βDIDi
2
.gr
2
, πv = (c, s1, s2, s3)
Çıktı: πv = 1
1: k
′′ ← g
s1
2
· α2
(1−c)
· k · β2
s2
2: com′′ ← g
s3
1
· h
s2
· comc
3: c
′ ← Hash(g1, g2, h, com, com′′, k, k′′)
4: if c
′ ̸= c then
5: return ”Hata”
6: else
7: return πv = 1
8: end if
A.1.6 ˙Imza Dogrulaması ˘
Algoritma 18, akıllı sözle¸sme tarafından seçim sırasında seçmenin yetkinliginin kontrolünde ˘
çalı¸stırılmaktadır. Bu algoritma ile adres üzerinde imza dogrulaması yapılan seçmenler belirlenir ˘
ve oyları akıllı sözle¸sme tarafından kabul edilir.
Algoritma 18 Coconut ˙Imza Do˘grulaması
Girdi: σ
Rnd = (σ
′′, k), πv
Çıktı: 1 or 0
1: if πv = 1 (Alg 17)and e(h
′′, k) = e(s
′′, g2) then
2: return 1
3: else
4: return 0
5: end if
